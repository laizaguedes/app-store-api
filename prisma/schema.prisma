generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql" // ou mysql/sqlite/etc
  url      = env("DATABASE_URL")
}

model User {
  id        Int           @id @default(autoincrement())
  name      String        @unique
  email     String        @unique
  password  String
  token     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  addresses UserAddress[]
  orders    Order[]
}

model UserAddress {
  id         Int      @id @default(autoincrement())
  userId     Int
  street     String
  number     String
  zipCode    String
  city       String
  state      String
  country    String
  complement String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Banner {
  id        Int      @id @default(autoincrement())
  img       String
  link      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Product {
  id          Int               @id @default(autoincrement())
  label       String
  price       Float
  description String
  categoryId  Int
  viewsCount  Int               @default(0)
  salesCount  Int               @default(0)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt
  images      ProductImage[]
  metadatas   ProductMetadata[]
  orderProducts OrderProduct[]
  category    Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductMetadata {
  id                 Int      @id @default(autoincrement())
  productId          Int
  categoryMetadataId Int
  metadataValueId    String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Category {
  id        Int                @id @default(autoincrement())
  slug      String             @unique
  name      String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now()) @updatedAt
  products  Product[]
  metadatas CategoryMetadata[]
}

model CategoryMetadata {
  id         String          @id
  categoryId Int
  name       String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @default(now()) @updatedAt
  metaDataValues     MetadataValue[]

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([categoryId])
}

model MetadataValue {
  id                 String   @id
  label              String
  categoryMetadataId String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt

  categoryMetadata CategoryMetadata @relation(fields: [categoryMetadataId], references: [id], onDelete: Cascade)

  @@index([categoryMetadataId])
}

model Order {
  id           Int         @id @default(autoincrement())
  userId       Int
  status       String      @default("pending") // pending, paid, shipped, delivered, canceled
  total        Float
  shippingCost Float       @default(0)
  shippingDays Int         @default(0)
  shippingZipCode String? // campo do address no momento da compra
  shippingStreet   String? // campo do address no momento da compra
  shippingNumber   String? // campo do address no momento da compra
  shippingCity     String? // campo do address no momento da compra
  shippingState    String? // campo do address no momento da compra
  shippingCountry  String? // campo do address no momento da compra
  shippingComplement String? // campo do address no momento da compra
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  orderProducts  OrderProduct[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
}